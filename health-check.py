
#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è RPA-–±–æ—Ç–∞
"""

import requests
import json
import sys
import time
from datetime import datetime

def check_bot_health(url):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ RPA-–±–æ—Ç–∞"""
    try:
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ RPA-–±–æ—Ç–∞: {url}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint
        health_response = requests.get(f"{url}/health", timeout=10)
        
        if health_response.status_code == 200:
            health_data = health_response.json()
            print("‚úÖ RPA-–±–æ—Ç –æ–Ω–ª–∞–π–Ω")
            print(f"   –°—Ç–∞—Ç—É—Å: {health_data.get('status')}")
            print(f"   –í–µ—Ä—Å–∏—è: {health_data.get('version')}")
            print(f"   –°—Ä–µ–¥–∞: {health_data.get('environment')}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
            status_response = requests.get(f"{url}/status", timeout=10)
            if status_response.status_code == 200:
                status_data = status_response.json()
                print(f"   –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {', '.join(status_data.get('capabilities', []))}")
            
            return True
            
        else:
            print(f"‚ùå RPA-–±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {health_response.status_code}")
            return False
            
    except requests.exceptions.ConnectionError:
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RPA-–±–æ—Ç—É")
        return False
    except requests.exceptions.Timeout:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RPA-–±–æ—Ç—É")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return False

def test_rpa_task(url):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ RPA –∑–∞–¥–∞—á–∏"""
    try:
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RPA –∑–∞–¥–∞—á–∏...")
        
        test_task = {
            "taskId": f"test_{int(time.time())}",
            "url": "https://httpbin.org/get",
            "actions": [
                {"type": "navigate", "url": "https://httpbin.org/get"},
                {"type": "wait", "duration": 2000}
            ],
            "accountId": "test",
            "scenarioId": "test",
            "blockId": "test",
            "timeout": 30000
        }
        
        response = requests.post(
            f"{url}/execute", 
            json=test_task, 
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è RPA –∑–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞")
            print(f"   –ó–∞–¥–∞—á–∞ ID: {result.get('taskId')}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python health-check.py <URL_–ë–û–¢–ê>")
        print("–ü—Ä–∏–º–µ—Ä: python health-check.py https://your-bot.up.railway.app")
        sys.exit(1)
    
    bot_url = sys.argv[1].rstrip('/')
    
    print(f"ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ RPA-–±–æ—Ç–∞")
    print(f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("-" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
    health_ok = check_bot_health(bot_url)
    
    if health_ok:
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        test_ok = test_rpa_task(bot_url)
        
        if test_ok:
            print("\nüéâ RPA-–±–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω!")
            sys.exit(0)
        else:
            print("\n‚ö†Ô∏è  RPA-–±–æ—Ç –æ–Ω–ª–∞–π–Ω, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–¥–∞—á")
            sys.exit(1)
    else:
        print("\n‚ùå RPA-–±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ–∏—Å–ø—Ä–∞–≤–µ–Ω")
        sys.exit(1)
